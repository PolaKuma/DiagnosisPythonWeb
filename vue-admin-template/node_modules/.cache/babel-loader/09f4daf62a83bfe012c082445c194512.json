{"remainingRequest":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/babel-loader/lib/index.js!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue","mtime":1702214752357},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/babel.config.js","mtime":1700932419779},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1702214739870},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/babel-loader/lib/index.js","mtime":1702214743160},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1702214739870},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":1702214743778}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AAEA;AAEA;AAEA;EACAA,qBADA;EAEAC;IACAC;MACAC,YADA;MAEAC;QAAA;MAAA;IAFA;EADA,CAFA;EAQAC,IARA,kBAQA;IACA;IACA;MACAC,mDADA;MAEAC,mDAFA;MAIAC,QAJA;MAKAC,SALA;MAOAC;QACA;AACA;AACA;AACA;AACA;QACAC,QANA;;QAOA;AACA;AACA;AACA;AACA;AACA;QACAC,8BAbA;;QAcA;AACA;AACA;AACA;AACA;QACAC,cAnBA;;QAoBA;AACA;AACA;AACA;AACA;QACAC,YAzBA;;QA0BA;AACA;AACA;AACA;AACA;QACAC,gBA/BA;;QAgCA;AACA;AACA;AACA;AACA;QACAC,iBArCA;;QAsCA;AACA;AACA;AACA;AACA;QACAC,eA3CA;;QA4CA;AACA;AACA;AACA;AACA;AACA;QACAC,oBAlDA;;QAmDA;AACA;AACA;AACA;AACA;QACAC;MAxDA,CAPA;MAkEAC;IAlEA;EAoEA,CA9EA;EA+EAC;IACAC,SADA,uBACA;MACA;MAAA;MAEA;MAEA;MAEA;IACA,CATA;IAUAC,UAVA,wBAUA;MACA;MAAA;MAEA;MAEA;MAEA;IACA,CAlBA;IAmBAC,MAnBA,oBAmBA;MACA;MAAA;MAAA;MAEA;MAEA;MAEA;MAAA;MAAA;MAEA;MAEA,2BACAX,uBADA,eACAY,UADA,uBAEAZ,wCAFA,eAEAY,kBAFA;IAIA,CAlCA;IAmCAC,aAnCA,2BAmCA;MACA;MAAA;MAEA;MAEA;MAAA;MAEA;IACA,CA3CA;IA4CAC,cA5CA,4BA4CA;MACA;MAEA;MAEA;MAEA;MAEA;MAEA;QAAA;MAAA;IACA,CAxDA;IAyDAC,gBAzDA,8BAyDA;MACA;MAAA;MAAA;MAEA;MAEA;MAEA;IACA,CAjEA;IAkEAC,aAlEA,2BAkEA;MACA;MAEA;MAEA;MAEA;IACA,CA1EA;IA2EAC,OA3EA,qBA2EA;MACA;MAEA;MAEA;MAAA;MAEA;IACA;EAnFA,CA/EA;EAoKAC;IACA7B,MADA,oBACA;MACA;MAEA8B;IACA;EALA,CApKA;EA2KAC;IACAC,IADA,kBACA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAC,MADA,GACA,KADA,CACAA,MADA,EACAjC,MADA,GACA,KADA,CACAA,MADA,EACA8B,WADA,GACA,KADA,CACAA,WADA;gBAAA;gBAAA,OAGAG,QAHA;;cAAA;gBAAA,IAKAjC,MALA;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAOA8B;;cAPA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAQA,CATA;IAUAG,MAVA,oBAUA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACAC,SADA,GACA,MADA,CACAA,SADA,EACAC,KADA,GACA,MADA,CACAA,KADA;gBAAA;gBAAA,OAGAD,WAHA;;cAAA;gBAAA,qBAKAC,qBALA,EAKAC,WALA,sBAKAA,WALA,EAKAC,YALA,sBAKAA,YALA;gBAOA;gBACA;;cARA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IASA,CAnBA;IAoBAP,WApBA,yBAoBA;MACA;MAAA;MAEA;IACA;EAxBA,CA3KA;EAqMAQ,OArMA,qBAqMA;IACA;IAEAN;EACA;AAzMA","names":["name","props","config","type","default","data","gradientId1","gradientId2","width","height","defaultConfig","value","colors","borderWidth","borderGap","lineDash","textColor","borderRadius","localGradient","formatter","mergedConfig","computed","rectWidth","rectHeight","points","halfHeight","polylineWidth","linearGradient","polylineGradient","gradient2XPos","details","watch","mergeConfig","methods","init","initWH","$nextTick","$refs","clientWidth","clientHeight","mounted"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/percentPond/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"]}]}