{"remainingRequest":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/babel-loader/lib/index.js!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src/main.vue","mtime":1702214752365},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/babel.config.js","mtime":1700932419779},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1702214739870},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/babel-loader/lib/index.js","mtime":1702214743160},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1702214739870},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":1702214743778}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;AAEA;AAEA;AAEA;EACAA,qBADA;EAEAC,oBAFA;EAGAC;IACAC;MACAC,YADA;MAEAC;QAAA;MAAA;IAFA;EADA,CAHA;EASAC,IATA,kBASA;IACA;MACAC,mBADA;MAGAC;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,UAPA;;QAQA;AACA;AACA;AACA;AACA;QACAH,QAbA;;QAcA;AACA;AACA;AACA;AACA;QACAI,SAnBA;;QAoBA;AACA;AACA;AACA;AACA;QACAC,oBAzBA;;QA0BA;AACA;AACA;AACA;AACA;QACAC,oBA/BA;;QAgCA;AACA;AACA;AACA;AACA;QACAC,qBArCA;;QAsCA;AACA;AACA;AACA;AACA;QACAC,cA3CA;;QA4CA;AACA;AACA;AACA;AACA;QACAC,gBAjDA;;QAkDA;AACA;AACA;AACA;AACA;QACAC,eAvDA;;QAwDA;AACA;AACA;AACA;AACA;AACA;QACAC,SA9DA;;QA+DA;AACA;AACA;AACA;AACA;QACAC,YApEA;;QAqEA;AACA;AACA;AACA;AACA;QACAC,gBA1EA;;QA2EA;AACA;AACA;AACA;AACA;AACA;QACAC,kBAjFA;;QAkFA;AACA;AACA;AACA;AACA;AACA;QACAC;MAxFA,CAHA;MA8FAC,kBA9FA;MAgGAb,UAhGA;MAkGAc,YAlGA;MAoGAC,QApGA;MAsGAC,UAtGA;MAwGAC,WAxGA;MA0GAC,YA1GA;MA4GAC,UA5GA;MA8GAC,iBA9GA;MAgHAC,oBAhHA;MAkHAC,UAlHA;MAoHAC;IApHA;EAsHA,CAhIA;EAiIAC;IACA9B,MADA,oBACA;MACA;MAAA;MAEA+B;MAEA;MAEAC;IACA;EATA,CAjIA;EA4IAC;IACAC,WADA,uBACAC,KADA,EACAC,EADA,EACAC,EADA,EACAC,GADA,EACAC,IADA,EACA;MACA;MAAA;MAAA;MAAA;MAEA;MACA;;MAEA;QACAR;MACA,CAFA,MAEA;QACAS;MACA;IACA,CAZA;IAaAC,wBAbA,sCAaA;MACA;MAEAT;IACA,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","names":["name","mixins","props","config","type","default","data","ref","defaultConfig","header","rowNum","headerBGC","oddRowBGC","evenRowBGC","waitTime","headerHeight","columnWidth","align","index","indexHeader","carousel","hoverPause","mergedConfig","rowsData","rows","widths","heights","avgHeight","aligns","animationIndex","animationHandler","updater","needCalc","watch","stopAnimation","calcData","methods","handleHover","enter","ri","ci","row","ceil","animation","afterAutoResizeMixinInit","onResize","calcWidths","calcHeights","mergeConfig","calcHeaderData","calcRowsData","calcAligns","ceils","rowIndex","scroll","columnNum","start","rowLength","animationNum","back","clearTimeout","emitEvent","columnIndex","updateRows","destroyed"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/scrollBoard/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-scroll-board\" :ref=\"ref\">\n    <div class=\"header\" v-if=\"header.length && mergedConfig\" :style=\"`background-color: ${mergedConfig.headerBGC};`\">\n      <div\n        class=\"header-item\"\n        v-for=\"(headerItem, i) in header\"\n        :key=\"`${headerItem}${i}`\"\n        :style=\"`\n          height: ${mergedConfig.headerHeight}px;\n          line-height: ${mergedConfig.headerHeight}px;\n          width: ${widths[i]}px;\n        `\"\n        :align=\"aligns[i]\"\n        v-html=\"headerItem\"\n      />\n    </div>\n\n    <div\n      v-if=\"mergedConfig\"\n      class=\"rows\"\n      :style=\"`height: ${height - (header.length ? mergedConfig.headerHeight : 0)}px;`\"\n    >\n      <div\n        class=\"row-item\"\n        v-for=\"(row, ri) in rows\"\n        :key=\"`${row.toString()}${row.scroll}`\"\n        :style=\"`\n          height: ${heights[ri]}px;\n          line-height: ${heights[ri]}px;\n          background-color: ${mergedConfig[row.rowIndex % 2 === 0 ? 'evenRowBGC' : 'oddRowBGC']};\n        `\"\n      >\n        <div\n          class=\"ceil\"\n          v-for=\"(ceil, ci) in row.ceils\"\n          :key=\"`${ceil}${ri}${ci}`\"\n          :style=\"`width: ${widths[ci]}px;`\"\n          :align=\"aligns[ci]\"\n          v-html=\"ceil\"\n          @click=\"emitEvent('click', ri, ci, row, ceil)\"\n          @mouseenter=\"handleHover(true, ri, ci, row, ceil)\"\n          @mouseleave=\"handleHover(false)\"\n        />\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvScrollBoard',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      ref: 'scroll-board',\n\n      defaultConfig: {\n        /**\n         * @description Board header\n         * @type {Array<String>}\n         * @default header = []\n         * @example header = ['column1', 'column2', 'column3']\n         */\n        header: [],\n        /**\n         * @description Board data\n         * @type {Array<Array>}\n         * @default data = []\n         */\n        data: [],\n        /**\n         * @description Row num\n         * @type {Number}\n         * @default rowNum = 5\n         */\n        rowNum: 5,\n        /**\n         * @description Header background color\n         * @type {String}\n         * @default headerBGC = '#00BAFF'\n         */\n        headerBGC: '#00BAFF',\n        /**\n         * @description Odd row background color\n         * @type {String}\n         * @default oddRowBGC = '#003B51'\n         */\n        oddRowBGC: '#003B51',\n        /**\n         * @description Even row background color\n         * @type {String}\n         * @default evenRowBGC = '#003B51'\n         */\n        evenRowBGC: '#0A2732',\n        /**\n         * @description Scroll wait time\n         * @type {Number}\n         * @default waitTime = 2000\n         */\n        waitTime: 2000,\n        /**\n         * @description Header height\n         * @type {Number}\n         * @default headerHeight = 35\n         */\n        headerHeight: 35,\n        /**\n         * @description Column width\n         * @type {Array<Number>}\n         * @default columnWidth = []\n         */\n        columnWidth: [],\n        /**\n         * @description Column align\n         * @type {Array<String>}\n         * @default align = []\n         * @example align = ['left', 'center', 'right']\n         */\n        align: [],\n        /**\n         * @description Show index\n         * @type {Boolean}\n         * @default index = false\n         */\n        index: false,\n        /**\n         * @description index Header\n         * @type {String}\n         * @default indexHeader = '#'\n         */\n        indexHeader: '#',\n        /**\n         * @description Carousel type\n         * @type {String}\n         * @default carousel = 'single'\n         * @example carousel = 'single' | 'page'\n         */\n        carousel: 'single',\n        /**\n         * @description Pause scroll when mouse hovered\n         * @type {Boolean}\n         * @default hoverPause = true\n         * @example hoverPause = true | false\n         */\n        hoverPause: true\n      },\n\n      mergedConfig: null,\n\n      header: [],\n\n      rowsData: [],\n\n      rows: [],\n\n      widths: [],\n\n      heights: [],\n\n      avgHeight: 0,\n\n      aligns: [],\n\n      animationIndex: 0,\n\n      animationHandler: '',\n\n      updater: 0,\n\n      needCalc: false\n    }\n  },\n  watch: {\n    config () {\n      const { stopAnimation, calcData } = this\n\n      stopAnimation()\n\n      this.animationIndex = 0\n\n      calcData()\n    }\n  },\n  methods: {\n    handleHover(enter, ri, ci, row, ceil){\n      const { mergedConfig, emitEvent, stopAnimation, animation } = this\n\n      if (enter) emitEvent('mouseover', ri, ci, row, ceil)\n      if (!mergedConfig.hoverPause) return\n\n      if (enter) {\n        stopAnimation()\n      } else {\n        animation(true)\n      }\n    },\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { mergedConfig, calcWidths, calcHeights } = this\n\n      if (!mergedConfig) return\n\n      calcWidths()\n\n      calcHeights()\n    },\n    calcData () {\n      const { mergeConfig, calcHeaderData, calcRowsData } = this\n\n      mergeConfig()\n\n      calcHeaderData()\n\n      calcRowsData()\n\n      const { calcWidths, calcHeights, calcAligns } = this\n\n      calcWidths()\n\n      calcHeights()\n\n      calcAligns()\n\n      const { animation } = this\n\n      animation(true)\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    calcHeaderData () {\n      let { header, index, indexHeader} = this.mergedConfig\n\n      if (!header.length) {\n        this.header = []\n\n        return\n      }\n\n      header = [...header]\n\n      if (index) header.unshift(indexHeader)\n\n      this.header = header\n    },\n    calcRowsData () {\n      let { data, index, headerBGC, rowNum } = this.mergedConfig\n\n      if (index) {\n        data = data.map((row, i) => {\n          row = [...row]\n\n          const indexTag = `<span class=\"index\" style=\"background-color: ${headerBGC};\">${i + 1}</span>`\n\n          row.unshift(indexTag)\n\n          return row\n        })\n      }\n\n      data = data.map((ceils, i) => ({ ceils, rowIndex: i }))\n\n      const rowLength = data.length\n\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\n        data = [...data, ...data]\n      }\n\n      data = data.map((d, i) => ({ ...d, scroll: i }))\n\n      this.rowsData = data\n      this.rows = data\n    },\n    calcWidths () {\n      const { width, mergedConfig, rowsData } = this\n\n      const { columnWidth, header } = mergedConfig\n\n      const usedWidth = columnWidth.reduce((all, w) => all + w, 0)\n\n      let columnNum = 0\n      if (rowsData[0]) {\n        columnNum = rowsData[0].ceils.length\n      } else if (header.length) {\n        columnNum = header.length\n      }\n\n      const avgWidth = (width - usedWidth) / (columnNum - columnWidth.length)\n\n      const widths = new Array(columnNum).fill(avgWidth)\n\n      this.widths = deepMerge(widths, columnWidth)\n    },\n    calcHeights (onresize = false) {\n      const { height, mergedConfig, header } = this\n\n      const { headerHeight, rowNum, data } = mergedConfig\n\n      let allHeight = height\n\n      if (header.length) allHeight -= headerHeight\n\n      const avgHeight = allHeight / rowNum\n\n      this.avgHeight = avgHeight\n\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\n    },\n    calcAligns () {\n      const { header, mergedConfig } = this\n\n      const columnNum = header.length\n\n      let aligns = new Array(columnNum).fill('left')\n\n      const { align } = mergedConfig\n\n      this.aligns = deepMerge(aligns, align)\n    },\n    async animation (start = false) {\n      const { needCalc, calcHeights, calcRowsData } = this\n\n      if (needCalc) {\n        calcRowsData()\n        calcHeights()\n        this.needCalc = false\n      }\n\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\n\n      const { waitTime, carousel, rowNum } = mergedConfig\n\n      const rowLength = rowsData.length\n\n      if (rowNum >= rowLength) return\n\n      if (start) {\n        await new Promise(resolve => setTimeout(resolve, waitTime))\n        if (updater !== this.updater) return\n      }\n\n      const animationNum = carousel === 'single' ? 1 : rowNum\n\n      let rows = rowsData.slice(animationIndex)\n      rows.push(...rowsData.slice(0, animationIndex))\n\n      this.rows = rows.slice(0, carousel === 'page' ? rowNum * 2 : rowNum + 1)\n      this.heights = new Array(rowLength).fill(avgHeight)\n\n      await new Promise(resolve => setTimeout(resolve, 300))\n      if (updater !== this.updater) return\n\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\n\n      animationIndex += animationNum\n\n      const back = animationIndex - rowLength\n      if (back >= 0) animationIndex = back\n\n      this.animationIndex = animationIndex\n      this.animationHandler = setTimeout(animation, waitTime - 300)\n    },\n    stopAnimation () {\n      const { animationHandler, updater } = this\n\n      this.updater = (updater + 1) % 999999\n\n      if (!animationHandler) return\n\n      clearTimeout(animationHandler)\n    },\n    emitEvent (type, ri, ci, row, ceil) {\n      const { ceils, rowIndex } = row\n\n      this.$emit(type, {\n        row: ceils,\n        ceil,\n        rowIndex,\n        columnIndex: ci\n      })\n    },\n    updateRows(rows, animationIndex) {\n      const { mergedConfig, animationHandler, animation } = this\n\n      this.mergedConfig = {\n        ...mergedConfig,\n        data: [...rows]\n      }\n\n      this.needCalc = true\n\n      if (typeof animationIndex === 'number') this.animationIndex = animationIndex\n      if (!animationHandler) animation(true)\n    }\n  },\n  destroyed () {\n    const { stopAnimation } = this\n\n    stopAnimation()\n  }\n}\n</script>"]}]}