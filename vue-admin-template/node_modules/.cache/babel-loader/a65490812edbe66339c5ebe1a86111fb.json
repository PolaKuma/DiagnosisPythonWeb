{"remainingRequest":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/babel-loader/lib/index.js!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue","mtime":1702053848267},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/babel.config.js","mtime":1700932419779},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1700932421620},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/babel-loader/lib/index.js","mtime":1700932421115},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1700932421620},{"path":"/Users/junjie/Documents/GitHub/Untitled/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":1700932427812}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["name","props","config","default","data","gradientId","defaultConfig","shape","waveNum","waveHeight","waveOpacity","colors","formatter","mergedConfig","renderer","svgBorderGradient","details","waves","animation","computed","radius","watch","setTimeout","methods","init","initRender","calcData","mergeConfig","calcSvgBorderGradient","calcDetails","addWave","animationWave","animationFrame","style","drawed","getWaveShapes","points","mergeOffset","getWaveStyle","gradientColor","gradientType","gradientParams","gradientWith","opacity","translate","ctx","repeat","w","graph","mounted","beforeDestroy"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src","sources":["main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"]}]}